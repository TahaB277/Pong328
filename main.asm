	.INCLUDE "pongDef.inc"
	.ORG 0x00
	JMP START
	.ORG 0x1A
	JMP REFRESH_SCREEN
	.ORG 0x100
START:
	INIT_STACK
	LDI R20, 0x3C
	OUT DDRC, R20 
	OUT DDRD, R20 
	INIT_SPI
	INIT_LCD
	CALL RESET_GAME
	INIT_TIMER
	CLR R18 ; Button state register bit x set then : x state
			;	0 P1UP 1 P1DOWN 2 P2UP 3 P2DOWN
	SER R19 ; Ball state register
			; if 0 then test ball for boundaries, otherwise do not test

	LDS R20, P1SCORE
	LSL R20
	LSL R20
	OUT PORTC, R20

	LDS R20, P2SCORE
	LSL R20
	LSL R20
	OUT PORTD, R20

	SEI

LOOP:
	; Test the button for padel1 movement
	IN R22, PINC
	ANDI R22, 3
	CPI R22, UP
	BREQ P1_GOING_UP
	CPI R22, DOWN
	BREQ P1_GOING_DOWN
	ANDI R18, 0xFC 
	RJMP TEST_P2

P1_GOING_UP:
	SBRC R18, 0
	RJMP TEST_P2

	; Test if padel reached the borders
	LDS R23, P1POSY
	CPI R23, 0
	BREQ INTERMEDIATE_P1

	LDI R23, -PADEL_INCREMENTER
	STS P1VEL, R23

	ORI R18, 1

INTERMEDIATE_P1: ; THIS IS ONLY BECAUSE BREQ IS LIMITED 
	RJMP TEST_P2

P1_GOING_DOWN:
	SBRC R18, 1
	RJMP TEST_P2

	; Test if padel reached the borders
	LDS R23, P1POSY
	CPI R23, HEIGHT-PADELHEIGHT
	BREQ INTERMEDIATE_P1

	LDI R23, PADEL_INCREMENTER
	STS P1VEL, R23

	ORI R18, 2

TEST_P2:
; Test the button for padel2 movement
	IN R22, PIND
	ANDI R22, 3
	CPI R22, UP
	BREQ P2_GOING_UP
	CPI R22, DOWN
	BREQ P2_GOING_DOWN
	ANDI R18, 0xF3 
	RJMP TEST_BALL

P2_GOING_UP:
	SBRC R18, 2
	RJMP TEST_BALL

	; Test if padel reached the borders
	LDS R23, P2POSY
	CPI R23, 0
	BREQ INTERMEDIATE_P2

	LDI R23, -PADEL_INCREMENTER
	STS P2VEL, R23

	ORI R18, 4

INTERMEDIATE_P2: ; THIS IS ONLY BECAUSE BREQ IS LIMITED 
	RJMP TEST_BALL

P2_GOING_DOWN:
	SBRC R18, 3
	RJMP TEST_BALL
	
	; Test if padel reached the borders
	LDS R23, P2POSY
	CPI R23, HEIGHT-PADELHEIGHT
	BREQ INTERMEDIATE_P2

	LDI R23, PADEL_INCREMENTER
	STS P2VEL, R23
	
	ORI R18, 8

TEST_BALL:
 	SBRS R19, 0 ; To not test ball more than once before a new print
	RJMP LOOP

	; Upper Lower boundary test
	LDS R22, BPOSY
	LDI R23, -2
	ADD R22, R23
	CPI R22, 0					; UPPER BOUNDARY
	BREQ UPPER_LOWER_BOUNDARY
	LDS R22, BPOSY
	CPI R22, 0
	BREQ UPPER_LOWER_BOUNDARY

	LDS R22, BPOSY
	LDI R23, 2
	ADD R22, R23
	CPI R22, HEIGHT				; LOWER BOUNDARY
	BREQ UPPER_LOWER_BOUNDARY
	LDS R22, BPOSY
	LDI R23, 4
	ADD R22, R23
	CPI R22, HEIGHT				
	BREQ UPPER_LOWER_BOUNDARY

	; Test if ball hit paddle
	LDS R22, BPOSX
	LDI R23, -2
	ADD R22, R23
	CPI R22, PADELWIDTH			; PADEL1
	BREQ CONTINUE1
	LDS R22, BPOSX
	CPI R22, PADELWIDTH
	BREQ CONTINUE1

	LDS R22, BPOSX
	LDI R23, 2
	ADD R22, R23
	CPI R22, WIDTH-PADELWIDTH	; PADEL2
	BREQ CONTINUE2
	LDS R22, BPOSX
	CPI R22, WIDTH-PADELWIDTH
	BREQ CONTINUE2

	; Left Right boundary test
	/*LDS R22, BPOSX
	CPI R22, 0					; LEFT BOUNDARY
	BREQ LEFT_BOUNDARY

	LDS R22, BPOSX
	CPI R22, WIDTH-PADELWIDTH	; RIGHT BOUNDARY
	BREQ RIGHT_BOUNDARY*/

	; Normal state
	CLR R19
	RJMP LOOP


UPPER_LOWER_BOUNDARY:
	LDS R22, BVELY
	NEG R22
	STS BVELY, R22
	CLR R19
	RJMP LOOP
LEFT_BOUNDARY:
	CALL P2_SCORED
	CLR R19
	RJMP LOOP
RIGHT_BOUNDARY:
	CALL P1_SCORED
	CLR R19
	RJMP LOOP

CONTINUE1:
	LDS R22, BPOSY
	LDS R23, P1POSY
	CP R22, R23
	BRLO LEFT_BOUNDARY
	LDS R23, P1POSY
	LDI R24, PADELHEIGHT
	ADD R23, R24
	LDS R22, BPOSY
	CP R22, R23
	BRSH LEFT_BOUNDARY
	CALL BALL_HIT_PADEL1
	CLR R19
	RJMP LOOP

CONTINUE2:
	LDS R22, BPOSY
	LDS R23, P2POSY
	CP R22, R23
	BRLO RIGHT_BOUNDARY
	LDS R23, P2POSY
	LDI R24, PADELHEIGHT
	ADD R23, R24
	LDS R22, BPOSY
	CP R22, R23
	BRSH RIGHT_BOUNDARY
	CALL BALL_HIT_PADEL2
	CLR R19
	RJMP LOOP

/*LOOP_END:
	CLR R19
	JMP LOOP*/


BALL_HIT_PADEL1:
	; INVERSE X
	LDI R22, BALL_INCREMENTER
	STS BVELX, R22

	;LDI R22, BALL_INCREMENTER
	;STS BVELY, R22

	;RET

 /* TEST WHICH PART OF THE PADEL IT HIT
	PADEL Y		BALL Y VELOCITY 
	0->3		-4
	4->7		-2
	8->11		0
	12->15		2
	16->19		4 */

	LDS R22, BPOSY
	LDS R23, P1POSY
	LDI R24, 3
	ADD R23, R24
	CP R22, R23
	BRLO ZONE1

	LDS R23, P1POSY
	LDI R24, 7
	ADD R23, R24
	CP R22, R23
	BRLO ZONE2

	LDS R23, P1POSY
	LDI R24, 11
	ADD R23, R24
	CP R22, R23
	BRLO ZONE3

	LDS R23, P1POSY
	LDI R24, 15
	ADD R23, R24
	CP R22, R23
	BRLO ZONE4

	RJMP ZONE5 

BALL_HIT_PADEL2:
	; INVERSE X
	LDI R22, -BALL_INCREMENTER
	STS BVELX, R22

	;LDI R22, -BALL_INCREMENTER
	;STS BVELY, R22

	;RET

 /* TEST WHICH PART OF THE PADEL IT HIT
	PADEL Y		BALL Y VELOCITY 
	0->3		-4
	4->7		-2
	8->11		0
	12->15		2
	16->19		4 */ 

	LDS R22, BPOSY
	LDS R23, P2POSY
	LDI R24, 3
	ADD R23, R24
	CP R22, R23
	BRLO ZONE1

	LDS R23, P2POSY
	LDI R24, 7
	ADD R23, R24
	CP R22, R23
	BRLO ZONE2

	LDS R23, P2POSY
	LDI R24, 11
	ADD R23, R24
	CP R22, R23
	BRLO ZONE3

	LDS R23, P2POSY
	LDI R24, 15
	ADD R23, R24
	CP R22, R23
	BRLO ZONE4

	RJMP ZONE5 

ZONE1:
	LDI R22, -4
	STS BVELY, R22
	RET
ZONE2:
	LDI R22, -2
	STS BVELY, R22
	RET
ZONE3:
	LDI R22, 0
	STS BVELY, R22
	RET
ZONE4:
	LDI R22, 2
	STS BVELY, R22
	RET
ZONE5:
	LDI R22, 4
	STS BVELY, R22
	RET

P1_SCORED:
	CLI
	LDS R22, P1SCORE
	INC R22
	STS P1SCORE, R22

	LDS R20, P1SCORE
	LSL R20
	LSL R20
	OUT PORTC, R20

	CALL RESET_BALL_P1
	CALL DELAY_120ms
	CALL DELAY_120ms
	CALL DELAY_120ms
	CALL DELAY_120ms
	CALL DELAY_120ms
	CALL DELAY_120ms
	INIT_TIMER

	LDS R22, P1SCORE
	CPI R22, 3
	BREQ P1_WON

	SEI
	RET
P2_SCORED:
	CLI
	LDS R22, P2SCORE
	INC R22
	STS P2SCORE, R22

	LDS R20, P2SCORE
	LSL R20
	LSL R20
	OUT PORTD, R20

	CALL RESET_BALL_P2
	CALL DELAY_120ms
	CALL DELAY_120ms
	CALL DELAY_120ms
	CALL DELAY_120ms
	CALL DELAY_120ms
	CALL DELAY_120ms
	INIT_TIMER

	LDS R22, P2SCORE
	CPI R22, 3
	BREQ P2_WON

	SEI
	RET

P1_WON:
	LDI R22, 0
	STS P1SCORE, R22
	STS P2SCORE, R22

	LDS R20, P1SCORE
	LSL R20
	LSL R20
	OUT PORTC, R20
	LDS R20, P2SCORE
	LSL R20
	LSL R20
	OUT PORTD, R20

	CALL DELAY_120ms
	CALL DELAY_120ms
	CALL DELAY_120ms
	CALL DELAY_120ms
	CALL DELAY_120ms
	CALL DELAY_120ms
	INIT_TIMER
	CALL RESET_GAME
	SEI
	RET
P2_WON:
	LDI R22, 0
	STS P1SCORE, R22
	STS P2SCORE, R22

	LDS R20, P1SCORE
	LSL R20
	LSL R20
	OUT PORTC, R20
	LDS R20, P2SCORE
	LSL R20
	LSL R20
	OUT PORTD, R20

	CALL DELAY_120ms
	CALL DELAY_120ms
	CALL DELAY_120ms
	CALL DELAY_120ms
	CALL DELAY_120ms
	CALL DELAY_120ms
	INIT_TIMER
	CALL RESET_GAME
	SEI
	RET



/*	-------------------------------------------------
				END OF MAIN LOOP
	-------------------------------------------------	*/ 



DELAY_120ms:
	LDI R20, HIGH(-30000)
	STS TCNT1H, R20
	LDI R20, LOW(-30000)
	STS TCNT1L, R20
	LDI R20, 0
	STS TCCR1A, R20
	LDI R20, 2
	STS TCCR1B, R20
AGAIN_120ms:
	SBIS TIFR1, TOV1
	RJMP AGAIN_120ms
	LDI R20, 1<<TOV1
	OUT TIFR1, R20
	LDI R20, 0
	STS TCCR1B, R20
	STS TCCR1A, R20
	RET

TRANSMIT:
	CBI PORTB, 2
	OUT SPDR, R20
WAIT:
	IN R16, SPSR
	SBRS R16, SPIF
	RJMP WAIT
	SBI PORTB, 2
	RET



REFRESH_SCREEN:
	; Save SREG
	IN R20, SREG
	PUSH R20

	; PADEL1:
	LDS R20, P1VEL
	SBRS R20, 1 	; IF VEL = 6 SKIP (NOT DYNAMIC, BUT TO FIX BRANCH OUT OF RANGE)
	RJMP PRINT_P2

	INIT_ARGS 0, PADELWIDTH-1, 0, 0 , HIGH(PADELWIDTH*PADEL_INCREMENTER*2), LOW(PADELWIDTH*PADEL_INCREMENTER*2), BLACK ; For p1

	; Remove old Padel1
	LDS R20, P1POSY
	STS ARG2, R20
	LDS R20, P1POSY
	LDI R21, PADELHEIGHT-1
	ADD R20, R21
	STS ARG3, R20
	LDI R20, BLACK
	STS ARG6, R20
	CALL COLUMN_SET
	CALL ROW_SET
	CALL LCD_WRITE
	CALL SEND_COLOR

	; Update padel
	LDS R20, P1POSY
	LDS R21, P1VEL
	ADD R20, R21
	STS P1POSY, R20

	; Print new Padel1
	LDS R20, P1POSY
	STS ARG2, R20
	LDS R20, P1POSY
	LDI R21, PADELHEIGHT-1
	ADD R20, R21
	STS ARG3, R20
	LDI R20, WHITE
	STS ARG6, R20
	CALL COLUMN_SET
	CALL ROW_SET
	CALL LCD_WRITE
	CALL SEND_COLOR

	LDI R20, 0
	STS P1VEL, R20

PRINT_P2:
	; PADEL2:
	LDS R20, P2VEL
	SBRS R20, 1 	; IF VEL = 6 SKIP (NOT DYNAMIC, BUT TO FIX BRANCH OUT OF RANGE)
	RJMP PRINT_BALL

	INIT_ARGS WIDTH-PADELWIDTH, WIDTH-1, 0, 0 , HIGH(PADELWIDTH*PADEL_INCREMENTER*2), LOW(PADELWIDTH*PADEL_INCREMENTER*2), BLACK ; For p2

	; Remove old Padel2
	LDS R20, P2POSY
	STS ARG2, R20
	LDS R20, P2POSY
	LDI R21, PADELHEIGHT-1
	ADD R20, R21
	STS ARG3, R20
	LDI R20, BLACK
	STS ARG6, R20
	CALL COLUMN_SET
	CALL ROW_SET
	CALL LCD_WRITE
	CALL SEND_COLOR

	; Update padel
	LDS R20, P2POSY
	LDS R21, P2VEL
	ADD R20, R21
	STS P2POSY, R20

	; Print new Padel2
	LDS R20, P2POSY
	STS ARG2, R20
	LDS R20, P2POSY
	LDI R21, PADELHEIGHT-1
	ADD R20, R21
	STS ARG3, R20
	LDI R20, WHITE
	STS ARG6, R20
	CALL COLUMN_SET
	CALL ROW_SET
	CALL LCD_WRITE
	CALL SEND_COLOR

	LDI R20, 0
	STS P2VEL, R20

PRINT_BALL:
	INIT_ARGS 0, 0, 0, 0 , HIGH(BALLAREA*2), LOW(BALLAREA*2), BLACK ; For ball
	; Remove old ball
	LDS R20, BPOSX
	STS ARG0, R20
	LDS R20, BPOSX
	LDI R21, BALLWIDTH-1
	ADD R20, R21
	STS ARG1, R20
	LDS R20, BPOSY
	STS ARG2, R20
	LDS R20, BPOSY
	LDI R21, BALLWIDTH-1
	ADD R20, R21
	STS ARG3, R20
	LDI R20, BLACK
	STS ARG6, R20
	CALL COLUMN_SET
	CALL ROW_SET      
	CALL LCD_WRITE
	CALL SEND_COLOR

	; Update the ball first
	LDS R20, BPOSX
	LDS R21, BVELX
	ADD R20, R21
	STS BPOSX, R20
	LDS R20, BPOSY
	LDS R21, BVELY
	ADD R20, R21
	STS BPOSY, R20

	; Print new ball
	LDS R20, BPOSX
	STS ARG0, R20
	LDS R20, BPOSX
	LDI R21, BALLWIDTH-1
	ADD R20, R21
	STS ARG1, R20
	LDS R20, BPOSY
	STS ARG2, R20
	LDS R20, BPOSY
	LDI R21, BALLWIDTH-1
	ADD R20, R21
	STS ARG3, R20
	LDI R20, WHITE
	STS ARG6, R20
	CALL COLUMN_SET
	CALL ROW_SET      
	CALL LCD_WRITE
	CALL SEND_COLOR

	SER R19

	; Reset timer
	LDI R20, HIGH(-((16*1000000*REFRESHRATE)/256))
	STS TCNT1H, R20
	LDI R20, LOW(-((16*1000000*REFRESHRATE)/256))
	STS TCNT1L, R20

	; Loading SREG
	POP R20
	OUT SREG, R20

	RETI


RESET_GAME:
	POS_INIT
	; all black screen
	INIT_ARGS 0, WIDTH-1, 0, HEIGHT-1, HIGH(AREA*2), LOW(AREA*2), BLACK
	CALL COLUMN_SET
	CALL ROW_SET
	CALL LCD_WRITE
	CALL SEND_COLOR
	; print Padel1
	INIT_ARGS 0, PADELWIDTH-1, (HEIGHT/2)-(PADELHEIGHT/2), (HEIGHT/2)+(PADELHEIGHT/2)-1, HIGH(PADELAREA*2), LOW(PADELAREA*2), WHITE
	CALL COLUMN_SET
	CALL ROW_SET      
	CALL LCD_WRITE
	CALL SEND_COLOR   
	; print Padel2
	INIT_ARGS WIDTH-PADELWIDTH, WIDTH-1, (HEIGHT/2)-(PADELHEIGHT/2), (HEIGHT/2)+(PADELHEIGHT/2)-1, HIGH(PADELAREA*2), LOW(PADELAREA*2), WHITE
	CALL COLUMN_SET   
	CALL ROW_SET      
	CALL LCD_WRITE
	CALL SEND_COLOR   
	; print the ball
	INIT_ARGS BALL_INIT_X, BALL_INIT_X+BALLWIDTH-1, (HEIGHT/2), (HEIGHT/2)+(BALLWIDTH)-1, HIGH(BALLAREA*2), LOW(BALLAREA*2), WHITE
	CALL COLUMN_SET   
	CALL ROW_SET      
	CALL LCD_WRITE
	CALL SEND_COLOR 
	; print the lines in the middle
	INIT_ARGS (WIDTH/2)-1, (WIDTH/2)-1, 0, 19, 0, 20*2, WHITE
	CALL COLUMN_SET   
	CALL ROW_SET      
	CALL LCD_WRITE
	CALL SEND_COLOR
	INIT_ARGS (WIDTH/2)-1, (WIDTH/2)-1, 27, 46, 0, 20*2, WHITE
	CALL COLUMN_SET   
	CALL ROW_SET      
	CALL LCD_WRITE
	CALL SEND_COLOR      
	INIT_ARGS (WIDTH/2)-1, (WIDTH/2)-1, 54, 73, 0, 20*2, WHITE
	CALL COLUMN_SET   
	CALL ROW_SET      
	CALL LCD_WRITE
	CALL SEND_COLOR   
	INIT_ARGS (WIDTH/2)-1, (WIDTH/2)-1, 81, 100, 0, 20*2, WHITE
	CALL COLUMN_SET   
	CALL ROW_SET      
	CALL LCD_WRITE
	CALL SEND_COLOR   
	INIT_ARGS (WIDTH/2)-1, (WIDTH/2)-1, 108, 127, 0, 20*2, WHITE
	CALL COLUMN_SET   
	CALL ROW_SET      
	CALL LCD_WRITE
	CALL SEND_COLOR   
	RET


RESET_BALL_P1:
	INIT_ARGS 0, 0, 0, 0 , HIGH(BALLAREA*2), LOW(BALLAREA*2), BLACK ; For ball
	; Remove old ball
	LDS R20, BPOSX
	STS ARG0, R20
	LDS R20, BPOSX
	LDI R21, BALLWIDTH-1
	ADD R20, R21
	STS ARG1, R20
	LDS R20, BPOSY
	STS ARG2, R20
	LDS R20, BPOSY
	LDI R21, BALLWIDTH-1
	ADD R20, R21
	STS ARG3, R20
	CALL COLUMN_SET
	CALL ROW_SET      
	CALL LCD_WRITE
	CALL SEND_COLOR

	;CALL DELAY_120ms

	; Update the ball
	LDI R20, (WIDTH/2)-4
	STS BPOSX, R20
	LDI R20, (HEIGHT/2)
	STS BPOSY, R20
	LDI R20, BALL_INCREMENTER
	STS BVELX, R20
	LDI R20, 0
	STS BVELY, R20

	RET
RESET_BALL_P2:
	INIT_ARGS 0, 0, 0, 0 , HIGH(BALLAREA*2), LOW(BALLAREA*2), BLACK ; For ball
	; Remove old ball
	LDS R20, BPOSX
	STS ARG0, R20
	LDS R20, BPOSX
	LDI R21, BALLWIDTH-1
	ADD R20, R21
	STS ARG1, R20
	LDS R20, BPOSY
	STS ARG2, R20
	LDS R20, BPOSY
	LDI R21, BALLWIDTH-1
	ADD R20, R21
	STS ARG3, R20
	CALL COLUMN_SET
	CALL ROW_SET      
	CALL LCD_WRITE
	CALL SEND_COLOR

	;CALL DELAY_120ms

	; Update the ball
	LDI R20, (WIDTH/2)+4
	STS BPOSX, R20
	LDI R20, (HEIGHT/2)
	STS BPOSY, R20
	LDI R20, -BALL_INCREMENTER
	STS BVELX, R20
	LDI R20, 0
	STS BVELY, R20

	RET

COLUMN_SET:
	CBI PORTB, 0
	LDI R20, CASET ; Column Address Set 
	CALL TRANSMIT
	SBI PORTB, 0
	LDI R20, 0
	CALL TRANSMIT
	LDS R20, ARG0
	CALL TRANSMIT
	LDI R20, 0
	CALL TRANSMIT
	LDS R20, ARG1
	CALL TRANSMIT
	RET

ROW_SET:
	CBI PORTB, 0
	LDI R20, RASET ; Row Address Set 
	CALL TRANSMIT
	SBI PORTB, 0
	LDI R20, 0
	CALL TRANSMIT
	LDS R20, ARG2
	CALL TRANSMIT
	LDI R20, 0
	CALL TRANSMIT
	LDS R20, ARG3
	CALL TRANSMIT
	RET

LCD_WRITE:
; Execute this function before SEND_COLOR
	CBI PORTB, 0
	LDI R20, RAMWR ; Memory write
	CALL TRANSMIT
	RET

SEND_COLOR:
; @0 is how many times do i want to send it, up to 2 Bytes
; @1 is the color (sends one color only)
	LDS R26, ARG4
	LDS R25, ARG5
	SBI PORTB, 0
KEEP_SENDING:
	LDS R20, ARG6
	CALL TRANSMIT
	DEC R26
	BRNE KEEP_SENDING
	DEC R25
	BRNE KEEP_SENDING
	RET